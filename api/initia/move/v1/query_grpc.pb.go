// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: initia/move/v1/query.proto

package movev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Module_FullMethodName                = "/initia.move.v1.Query/Module"
	Query_Modules_FullMethodName               = "/initia.move.v1.Query/Modules"
	Query_Resource_FullMethodName              = "/initia.move.v1.Query/Resource"
	Query_Resources_FullMethodName             = "/initia.move.v1.Query/Resources"
	Query_TableEntry_FullMethodName            = "/initia.move.v1.Query/TableEntry"
	Query_TableEntries_FullMethodName          = "/initia.move.v1.Query/TableEntries"
	Query_ViewFunction_FullMethodName          = "/initia.move.v1.Query/ViewFunction"
	Query_ScriptABI_FullMethodName             = "/initia.move.v1.Query/ScriptABI"
	Query_StructTagByDenom_FullMethodName      = "/initia.move.v1.Query/StructTagByDenom"
	Query_Denom_FullMethodName                 = "/initia.move.v1.Query/Denom"
	Query_StructTagByNftClassId_FullMethodName = "/initia.move.v1.Query/StructTagByNftClassId"
	Query_NftClassId_FullMethodName            = "/initia.move.v1.Query/NftClassId"
	Query_StructTagBySftClassId_FullMethodName = "/initia.move.v1.Query/StructTagBySftClassId"
	Query_SftClassId_FullMethodName            = "/initia.move.v1.Query/SftClassId"
	Query_Params_FullMethodName                = "/initia.move.v1.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Module gets the module info
	Module(ctx context.Context, in *QueryModuleRequest, opts ...grpc.CallOption) (*QueryModuleResponse, error)
	// Modules gets the module infos
	Modules(ctx context.Context, in *QueryModulesRequest, opts ...grpc.CallOption) (*QueryModulesResponse, error)
	// Resource gets the module info
	Resource(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (*QueryResourceResponse, error)
	// Resources gets the module infos
	Resources(ctx context.Context, in *QueryResourcesRequest, opts ...grpc.CallOption) (*QueryResourcesResponse, error)
	TableEntry(ctx context.Context, in *QueryTableEntryRequest, opts ...grpc.CallOption) (*QueryTableEntryResponse, error)
	TableEntries(ctx context.Context, in *QueryTableEntriesRequest, opts ...grpc.CallOption) (*QueryTableEntriesResponse, error)
	// ViewFunction execute entry function and return  the function result
	ViewFunction(ctx context.Context, in *QueryViewFunctionRequest, opts ...grpc.CallOption) (*QueryViewFunctionResponse, error)
	// ScriptABI decode script bytes into ABI
	ScriptABI(ctx context.Context, in *QueryScriptABIRequest, opts ...grpc.CallOption) (*QueryScriptABIResponse, error)
	// StructTagByDenom queries struct tag with denom.
	StructTagByDenom(ctx context.Context, in *QueryStructTagByDenomRequest, opts ...grpc.CallOption) (*QueryStructTagByDenomResponse, error)
	// Denom queries denom with struct_tag.
	Denom(ctx context.Context, in *QueryDenomRequest, opts ...grpc.CallOption) (*QueryDenomResponse, error)
	// StructTagByNftClassId queries struct tag with nft class id.
	StructTagByNftClassId(ctx context.Context, in *QueryStructTagByNftClassIdRequest, opts ...grpc.CallOption) (*QueryStructTagByNftClassIdResponse, error)
	// NftClassId queries nft class id with struct_tag.
	NftClassId(ctx context.Context, in *QueryNftClassIdRequest, opts ...grpc.CallOption) (*QueryNftClassIdResponse, error)
	// StructTagBySftClassId queries struct tag with nft class id.
	StructTagBySftClassId(ctx context.Context, in *QueryStructTagBySftClassIdRequest, opts ...grpc.CallOption) (*QueryStructTagBySftClassIdResponse, error)
	// SftClassId queries nft class id with struct_tag.
	SftClassId(ctx context.Context, in *QuerySftClassIdRequest, opts ...grpc.CallOption) (*QuerySftClassIdResponse, error)
	// Params queries all parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Module(ctx context.Context, in *QueryModuleRequest, opts ...grpc.CallOption) (*QueryModuleResponse, error) {
	out := new(QueryModuleResponse)
	err := c.cc.Invoke(ctx, Query_Module_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Modules(ctx context.Context, in *QueryModulesRequest, opts ...grpc.CallOption) (*QueryModulesResponse, error) {
	out := new(QueryModulesResponse)
	err := c.cc.Invoke(ctx, Query_Modules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Resource(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (*QueryResourceResponse, error) {
	out := new(QueryResourceResponse)
	err := c.cc.Invoke(ctx, Query_Resource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Resources(ctx context.Context, in *QueryResourcesRequest, opts ...grpc.CallOption) (*QueryResourcesResponse, error) {
	out := new(QueryResourcesResponse)
	err := c.cc.Invoke(ctx, Query_Resources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TableEntry(ctx context.Context, in *QueryTableEntryRequest, opts ...grpc.CallOption) (*QueryTableEntryResponse, error) {
	out := new(QueryTableEntryResponse)
	err := c.cc.Invoke(ctx, Query_TableEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TableEntries(ctx context.Context, in *QueryTableEntriesRequest, opts ...grpc.CallOption) (*QueryTableEntriesResponse, error) {
	out := new(QueryTableEntriesResponse)
	err := c.cc.Invoke(ctx, Query_TableEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ViewFunction(ctx context.Context, in *QueryViewFunctionRequest, opts ...grpc.CallOption) (*QueryViewFunctionResponse, error) {
	out := new(QueryViewFunctionResponse)
	err := c.cc.Invoke(ctx, Query_ViewFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScriptABI(ctx context.Context, in *QueryScriptABIRequest, opts ...grpc.CallOption) (*QueryScriptABIResponse, error) {
	out := new(QueryScriptABIResponse)
	err := c.cc.Invoke(ctx, Query_ScriptABI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructTagByDenom(ctx context.Context, in *QueryStructTagByDenomRequest, opts ...grpc.CallOption) (*QueryStructTagByDenomResponse, error) {
	out := new(QueryStructTagByDenomResponse)
	err := c.cc.Invoke(ctx, Query_StructTagByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Denom(ctx context.Context, in *QueryDenomRequest, opts ...grpc.CallOption) (*QueryDenomResponse, error) {
	out := new(QueryDenomResponse)
	err := c.cc.Invoke(ctx, Query_Denom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructTagByNftClassId(ctx context.Context, in *QueryStructTagByNftClassIdRequest, opts ...grpc.CallOption) (*QueryStructTagByNftClassIdResponse, error) {
	out := new(QueryStructTagByNftClassIdResponse)
	err := c.cc.Invoke(ctx, Query_StructTagByNftClassId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftClassId(ctx context.Context, in *QueryNftClassIdRequest, opts ...grpc.CallOption) (*QueryNftClassIdResponse, error) {
	out := new(QueryNftClassIdResponse)
	err := c.cc.Invoke(ctx, Query_NftClassId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructTagBySftClassId(ctx context.Context, in *QueryStructTagBySftClassIdRequest, opts ...grpc.CallOption) (*QueryStructTagBySftClassIdResponse, error) {
	out := new(QueryStructTagBySftClassIdResponse)
	err := c.cc.Invoke(ctx, Query_StructTagBySftClassId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SftClassId(ctx context.Context, in *QuerySftClassIdRequest, opts ...grpc.CallOption) (*QuerySftClassIdResponse, error) {
	out := new(QuerySftClassIdResponse)
	err := c.cc.Invoke(ctx, Query_SftClassId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Module gets the module info
	Module(context.Context, *QueryModuleRequest) (*QueryModuleResponse, error)
	// Modules gets the module infos
	Modules(context.Context, *QueryModulesRequest) (*QueryModulesResponse, error)
	// Resource gets the module info
	Resource(context.Context, *QueryResourceRequest) (*QueryResourceResponse, error)
	// Resources gets the module infos
	Resources(context.Context, *QueryResourcesRequest) (*QueryResourcesResponse, error)
	TableEntry(context.Context, *QueryTableEntryRequest) (*QueryTableEntryResponse, error)
	TableEntries(context.Context, *QueryTableEntriesRequest) (*QueryTableEntriesResponse, error)
	// ViewFunction execute entry function and return  the function result
	ViewFunction(context.Context, *QueryViewFunctionRequest) (*QueryViewFunctionResponse, error)
	// ScriptABI decode script bytes into ABI
	ScriptABI(context.Context, *QueryScriptABIRequest) (*QueryScriptABIResponse, error)
	// StructTagByDenom queries struct tag with denom.
	StructTagByDenom(context.Context, *QueryStructTagByDenomRequest) (*QueryStructTagByDenomResponse, error)
	// Denom queries denom with struct_tag.
	Denom(context.Context, *QueryDenomRequest) (*QueryDenomResponse, error)
	// StructTagByNftClassId queries struct tag with nft class id.
	StructTagByNftClassId(context.Context, *QueryStructTagByNftClassIdRequest) (*QueryStructTagByNftClassIdResponse, error)
	// NftClassId queries nft class id with struct_tag.
	NftClassId(context.Context, *QueryNftClassIdRequest) (*QueryNftClassIdResponse, error)
	// StructTagBySftClassId queries struct tag with nft class id.
	StructTagBySftClassId(context.Context, *QueryStructTagBySftClassIdRequest) (*QueryStructTagBySftClassIdResponse, error)
	// SftClassId queries nft class id with struct_tag.
	SftClassId(context.Context, *QuerySftClassIdRequest) (*QuerySftClassIdResponse, error)
	// Params queries all parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Module(context.Context, *QueryModuleRequest) (*QueryModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Module not implemented")
}
func (UnimplementedQueryServer) Modules(context.Context, *QueryModulesRequest) (*QueryModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modules not implemented")
}
func (UnimplementedQueryServer) Resource(context.Context, *QueryResourceRequest) (*QueryResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resource not implemented")
}
func (UnimplementedQueryServer) Resources(context.Context, *QueryResourcesRequest) (*QueryResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resources not implemented")
}
func (UnimplementedQueryServer) TableEntry(context.Context, *QueryTableEntryRequest) (*QueryTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntry not implemented")
}
func (UnimplementedQueryServer) TableEntries(context.Context, *QueryTableEntriesRequest) (*QueryTableEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntries not implemented")
}
func (UnimplementedQueryServer) ViewFunction(context.Context, *QueryViewFunctionRequest) (*QueryViewFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewFunction not implemented")
}
func (UnimplementedQueryServer) ScriptABI(context.Context, *QueryScriptABIRequest) (*QueryScriptABIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptABI not implemented")
}
func (UnimplementedQueryServer) StructTagByDenom(context.Context, *QueryStructTagByDenomRequest) (*QueryStructTagByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructTagByDenom not implemented")
}
func (UnimplementedQueryServer) Denom(context.Context, *QueryDenomRequest) (*QueryDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Denom not implemented")
}
func (UnimplementedQueryServer) StructTagByNftClassId(context.Context, *QueryStructTagByNftClassIdRequest) (*QueryStructTagByNftClassIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructTagByNftClassId not implemented")
}
func (UnimplementedQueryServer) NftClassId(context.Context, *QueryNftClassIdRequest) (*QueryNftClassIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftClassId not implemented")
}
func (UnimplementedQueryServer) StructTagBySftClassId(context.Context, *QueryStructTagBySftClassIdRequest) (*QueryStructTagBySftClassIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructTagBySftClassId not implemented")
}
func (UnimplementedQueryServer) SftClassId(context.Context, *QuerySftClassIdRequest) (*QuerySftClassIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SftClassId not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Module_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Module(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Module_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Module(ctx, req.(*QueryModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Modules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Modules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Modules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Modules(ctx, req.(*QueryModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Resource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Resource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Resource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Resource(ctx, req.(*QueryResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Resources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Resources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Resources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Resources(ctx, req.(*QueryResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TableEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TableEntry(ctx, req.(*QueryTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TableEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTableEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TableEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TableEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TableEntries(ctx, req.(*QueryTableEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ViewFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryViewFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ViewFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ViewFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ViewFunction(ctx, req.(*QueryViewFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScriptABI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScriptABIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScriptABI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ScriptABI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScriptABI(ctx, req.(*QueryScriptABIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructTagByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStructTagByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructTagByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StructTagByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructTagByDenom(ctx, req.(*QueryStructTagByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Denom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Denom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Denom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Denom(ctx, req.(*QueryDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructTagByNftClassId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStructTagByNftClassIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructTagByNftClassId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StructTagByNftClassId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructTagByNftClassId(ctx, req.(*QueryStructTagByNftClassIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftClassId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNftClassIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftClassId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NftClassId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftClassId(ctx, req.(*QueryNftClassIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructTagBySftClassId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStructTagBySftClassIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructTagBySftClassId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StructTagBySftClassId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructTagBySftClassId(ctx, req.(*QueryStructTagBySftClassIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SftClassId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySftClassIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SftClassId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SftClassId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SftClassId(ctx, req.(*QuerySftClassIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "initia.move.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Module",
			Handler:    _Query_Module_Handler,
		},
		{
			MethodName: "Modules",
			Handler:    _Query_Modules_Handler,
		},
		{
			MethodName: "Resource",
			Handler:    _Query_Resource_Handler,
		},
		{
			MethodName: "Resources",
			Handler:    _Query_Resources_Handler,
		},
		{
			MethodName: "TableEntry",
			Handler:    _Query_TableEntry_Handler,
		},
		{
			MethodName: "TableEntries",
			Handler:    _Query_TableEntries_Handler,
		},
		{
			MethodName: "ViewFunction",
			Handler:    _Query_ViewFunction_Handler,
		},
		{
			MethodName: "ScriptABI",
			Handler:    _Query_ScriptABI_Handler,
		},
		{
			MethodName: "StructTagByDenom",
			Handler:    _Query_StructTagByDenom_Handler,
		},
		{
			MethodName: "Denom",
			Handler:    _Query_Denom_Handler,
		},
		{
			MethodName: "StructTagByNftClassId",
			Handler:    _Query_StructTagByNftClassId_Handler,
		},
		{
			MethodName: "NftClassId",
			Handler:    _Query_NftClassId_Handler,
		},
		{
			MethodName: "StructTagBySftClassId",
			Handler:    _Query_StructTagBySftClassId_Handler,
		},
		{
			MethodName: "SftClassId",
			Handler:    _Query_SftClassId_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "initia/move/v1/query.proto",
}
